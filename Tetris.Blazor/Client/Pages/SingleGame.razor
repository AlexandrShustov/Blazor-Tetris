@page "/play"
@using Tetris.Blazor.Shared.Entities

@inject IDialogService _dialogService
@inject NavigationManager _navigation

<div class="game-container">
  <div class="game">
    <MudPaper Elevation="0"  Class="d-flex flex-row justify-content-between p-2 my-1 w-100">
      <MudText Typo="Typo.button" Color="Color.Secondary"  Align="Align.Right">Score: @_game?.Score</MudText>
      <MudText Typo="Typo.button" Color="Color.Secondary" Align="Align.Left">Level: @_game?.Level</MudText>
    </MudPaper>
    <GameView Game="_game"></GameView>
  </div>
</div>

@code
{
  private Game? _game;
  private readonly DialogOptions _options = new()
  {
    Position = DialogPosition.Center,
    MaxWidth = MaxWidth.Large,
    DisableBackdropClick = true,
  };

  protected override async Task OnInitializedAsync()
  {
    _game = new Game();
    _game.ScoreUpdated += StateHasChanged;
    _game.GameOver += async () => await ShowGameOverDialog();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
      await ShowWelcomeDialog();
  }

  private void Start()
  {
    _game?.Start();
  }

  private void Stop()
  {
    _game?.Stop();
  }

  private async Task ShowGameOverDialog()
  {
    var parameters = new DialogParameters {{"Score", _game?.Score}};
    var dialog = await _dialogService.ShowAsync<GameOverDialog>("Game over", parameters, _options);
    var result = await dialog.Result;
    if (result.Canceled)
    {
      _navigation.NavigateTo("/");
    }  
    else
    {
      Start();
      StateHasChanged();
    }
  }

  private async Task ShowWelcomeDialog()
  {
    var dialog = await _dialogService.ShowAsync<GameWelcomeDialog>("Are you ready?", _options);
    var result = await dialog.Result;
    if (!result.Canceled)
    {
      Start();
      StateHasChanged();
    }
  }
}
