@page "/play/{id}"

@using Tetris.Blazor.Shared.Entities
@using Microsoft.AspNetCore.SignalR.Client
@using Tetris.Blazor.Shared.SignalR
@using System.Timers
@using Position = Tetris.Blazor.Shared.Entities.Position
@implements IDisposable

@inject HttpClient _httpClient
@inject NavigationManager _navigation
@inject IDialogService _dialogs

<MudContainer>
  <MudGrid Justify="Justify.Center" Class="my-3">

    <MudItem Class="d-flex flex-column align-items-center" xs="5">
      <MudPaper Elevation="0" Class="px-3 py-1 mb-1">
        <MudText Typo="Typo.body2">Level: @_localGame.Level</MudText>
      </MudPaper>
      <GameView Game="@_localGame"></GameView>
    </MudItem>

    <MudItem Class="d-flex flex-column align-items-center" xs="5">
      <MudPaper Elevation="0" Class="px-3 py-1 mb-1">
        <MudText Typo="Typo.body2">Level: @_remoteGame.Level</MudText>
      </MudPaper>
      <GameView Game="@_remoteGame"></GameView>
    </MudItem>

  </MudGrid>

  <MudOverlay @bind-Visible="@_showWaitingOverlay" LightBackground="true">
    <div class="d-flex flex-column align-items-center">
      <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
      <MudText Typo="Typo.body1" Color="Color.Primary">Please wait for your opponent...</MudText>
    </div>
  </MudOverlay>
</MudContainer>

@code {
  [Parameter]
  public string Id { get; set; }

  private HubConnection? _hubConnection;

  private readonly ILocalGame _localGame = new Game();
  private readonly IRemoteGame _remoteGame = new RemoteGame();

  private Update? _gameUpdate;

  private readonly Timer _updatesTimer = new Timer(TimeSpan.FromMilliseconds(50).TotalMilliseconds);

  private GameDto? _gameDto;

  private bool _showWaitingOverlay;

  protected override async Task OnInitializedAsync()
  {
    _gameDto = await _httpClient.GetFromJsonAsync<GameDto>($"api/game/{Id}");
    if (_gameDto is not { })
      return;

    _localGame.ScoreUpdated += async () => await OnScoreUpdated();
    _localGame.GameOver += async () => await OnGameOver();
    _localGame.GameLevel = new OnlineGameLevel();

    _gameUpdate = new Update();

    _hubConnection = new HubConnectionBuilder()
      .WithUrl(_navigation.ToAbsoluteUri($"/gamehub?gameId={_gameDto.Id}"))
      .Build();

    _hubConnection.On<Guid>(Method.Client.GameJoined, OnGameJoined);
    _hubConnection.On<Guid>(Method.Client.GetReady, OnGetReady);
    _hubConnection.On<Guid>(Method.Client.Start, OnStart);
    _hubConnection.On<Update>(Method.Client.HandleUpdate, OnUpdateReceived);
    _hubConnection.On<OnlineGameResult>(Method.Client.GameOver, OnGameOver);
    _hubConnection.On(Method.Client.OpponentHasDisconnected, OnOpponentHasDisconnected);

    await _hubConnection.StartAsync();
    await _hubConnection.SendAsync(Method.JoinGame, _gameDto.Id);

    _updatesTimer.Elapsed += async (_, _) => await OnUpdate();

    _navigation.LocationChanged += async (x, y) =>
    {
      _localGame.Stop();
      await _hubConnection.DisposeAsync();
    };
  }

  private async Task OnScoreUpdated()
  {
    var update = new Update();
    update.SetLevel(_localGame.Level);

    await _hubConnection!.SendAsync(Method.ScoreUpdated, _gameUpdate);
  }

  private async Task OnGetReady(Guid gameId)
  {
    _showWaitingOverlay = false;

    var dialog = await _dialogs.ShowAsync<GetReadyDialog>();
    var result = await dialog.Result;
    if ((bool)(result.Data))
    {
      await _hubConnection!.SendAsync(Method.Ready, _gameDto.Id);
      StateHasChanged();
      _showWaitingOverlay = true;
    }
  }

  private async Task OnGameJoined(Guid gameId)
  {
    _showWaitingOverlay = true;
    StateHasChanged();
  }

  private void OnStart(Guid arg)
  {
    _showWaitingOverlay = false;

    _localGame.Start();
    _updatesTimer.Start();

    StateHasChanged();
  }

  private async Task OnUpdate()
  {
    _gameUpdate!.Reset();
    _gameUpdate.Add(EmptyPositions());
    _gameUpdate.SetLevel(_localGame.Level);
    _gameUpdate.SetScore(_localGame.Score);

    await _hubConnection!.SendAsync(Method.Update, _gameUpdate);

    IEnumerable<Position> EmptyPositions()
    {
      foreach (var cell in _localGame.Field())
      {
        if (cell.State == State.Filled)
          yield return cell.Position;
      }
    }
  }

  private async Task OnGameOver()
  {
    _localGame.Stop();

    await OnUpdate();
    await _hubConnection!.SendAsync(Method.GameOver, new Update());
  }

  private void OnUpdateReceived(Update obj)
  {
    _remoteGame.HandleUpdate(obj);
    _localGame.GameLevel.Update(obj.Score);

    StateHasChanged();
  }

  private async Task OnGameOver(OnlineGameResult result)
  {
    _localGame.Stop();

    var parameters = new DialogParameters();
    parameters.Add("Result", result);

    var dialog = await _dialogs.ShowAsync<OnlineGameOverDialog>("Game over", parameters, new DialogOptions
      {
        CloseButton = false,
        CloseOnEscapeKey = false,
        Position = DialogPosition.Center
      });

    var dialogResponse = await dialog.Result;
    if (!dialogResponse.Canceled)
    {
      await _hubConnection!.SendAsync(Method.Ready, _gameDto!.Id);
      _showWaitingOverlay = true;
    }
    else
    {
      _navigation.NavigateTo("/");
    }
  }

  private async Task OnOpponentHasDisconnected()
  {
    _localGame.Stop();

    var options = new DialogOptions
      {
        CloseOnEscapeKey = false,
        DisableBackdropClick = true,
        CloseButton = false,
        Position = DialogPosition.Center,
      };

    var dialog = await _dialogs.ShowAsync<ConnectionLostDialog>("Connection lost", options);
    var result = await dialog.Result;

    if (!result.Canceled)
      _navigation.NavigateTo("/");
  }

  public void Dispose()
  {
    try
    {
      _updatesTimer.Dispose();
      _localGame.Stop();
      _hubConnection?.StopAsync();
    }
    catch
    {
      _hubConnection?.DisposeAsync().GetAwaiter().GetResult();
    }
  }
}