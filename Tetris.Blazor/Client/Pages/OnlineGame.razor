@page "/play/{id}"
@using Tetris.Blazor.Shared.Entities
@using Microsoft.AspNetCore.SignalR.Client
@using Tetris.Blazor.Shared.SignalR
@using System.Timers
@using Position = Tetris.Blazor.Shared.Entities.Position

@inject HttpClient _httpClient
@inject NavigationManager _navigation
@inject IDialogService _dialogs

<MudContainer>
  @if (_joined)
  {
    <MudText Typo="Typo.body1"
             Color="Color.Primary">
      You've joined @(_gameDto?.Name ?? "unnamed") game!
    </MudText>
  }
  @if (_ready)
  {
    <MudText Typo="Typo.body1"
           Color="Color.Primary">
      You are ready!
    </MudText>
  }
  @if (_started)
  {
    <MudText Typo="Typo.body1"
             Color="Color.Primary">
      The game has started!!
    </MudText>
  }
  
  <MudGrid>
    <MudItem Class="d-flex flex-column justify-content-center" xs="6">
      <GameView Game="@_localGame"></GameView>
    </MudItem>
    <MudItem Class="d-flex flex-column justify-content-center" xs="6">
      <GameView Game="@_remoteGame"></GameView>
    </MudItem>
  </MudGrid>

</MudContainer>

@code {
  [Parameter]
  public string Id { get; set; }

  private HubConnection? _hubConnection;

  private readonly ILocalGame _localGame = new Game();
  private readonly IRemoteGame _remoteGame = new RemoteGame();

  private bool _joined = false;
  private bool _ready = false;
  private bool _started = false;

  private Update _gameUpdate;

  private readonly Timer _timer = new Timer(TimeSpan.FromMilliseconds(50).TotalMilliseconds);

  private GameDto? _gameDto;

  protected override async Task OnInitializedAsync()
  {
    _gameDto = await _httpClient.GetFromJsonAsync<GameDto>($"api/game/{Id}");
    if (_gameDto is not { })
      return;

    _gameUpdate = new Update(_gameDto.Id);

    _hubConnection = new HubConnectionBuilder()
      .WithUrl(_navigation.ToAbsoluteUri("/gamehub"))
      .Build();

    _hubConnection.On<Guid>(Method.Client.GameJoined, OnGameJoined);
    _hubConnection.On<Guid>(Method.Client.GetReady, OnGetReady);
    _hubConnection.On<Guid>(Method.Client.Start, OnStart);
    _hubConnection.On<Update>(Method.Client.HandleUpdate, HandleUpdate);

    await _hubConnection.StartAsync();
    await _hubConnection.SendAsync(Method.JoinGame, _gameDto.Id);

    _timer.Elapsed += (_, _) => SendUpdate(_localGame, _hubConnection, _gameDto);
  }

  private async Task OnGetReady(Guid gameId)
  {
    if (_gameDto!.Id == gameId)
    {
      var dialog = await _dialogs.ShowAsync<GetReadyDialog>();
      var result = await dialog.Result;
      if ((bool) (result.Data))
      {
        await _hubConnection!.SendAsync(Method.Ready, _gameDto.Id);
        _ready = true;
        StateHasChanged();
      }
    }
  }

  private void OnGameJoined(Guid gameId)
  {
    if (_gameDto!.Id == gameId)
    {
      _joined = true;
      StateHasChanged();
    }
  }

  private void OnStart(Guid arg)
  {
    if (_gameDto!.Id != arg)
      return;

    _started = true;
    _localGame.Start();
    _timer.Start();

    StateHasChanged();
  }

  private async void SendUpdate(ILocalGame game, HubConnection connection, GameDto gameDto)
  {
    _gameUpdate.Reset();
    _gameUpdate.Add(EmptyPositions());
    _gameUpdate.SetLevel(_localGame.Level);
    _gameUpdate.SetScore(_localGame.Score);
    
    await connection!.SendAsync(Method.Update, _gameUpdate);

    IEnumerable<Position> EmptyPositions()
    {
      foreach (var cell in game.Field())
      {
        if (cell.State == State.Filled)
          yield return cell.Position;
      }
    }
  }

  private void HandleUpdate(Update obj)
  {
    _remoteGame.HandleUpdate(obj);
    StateHasChanged();
  }
}